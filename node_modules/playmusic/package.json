{
  "_args": [
    [
      "git+https://github.com/jamon/playmusic.git",
      "/atomos"
    ]
  ],
  "_from": "git+https://github.com/jamon/playmusic.git",
  "_id": "playmusic@2.3.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/playmusic",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/jamon/playmusic/master/package.json",
      "gitUrl": "git://github.com/jamon/playmusic.git",
      "httpsUrl": "git+https://github.com/jamon/playmusic.git",
      "shortcut": "github:jamon/playmusic",
      "ssh": "git@github.com:jamon/playmusic.git",
      "sshUrl": "git+ssh://git@github.com/jamon/playmusic.git",
      "type": "github"
    },
    "name": null,
    "raw": "git+https://github.com/jamon/playmusic.git",
    "rawSpec": "git+https://github.com/jamon/playmusic.git",
    "scope": null,
    "spec": "git+https://github.com/jamon/playmusic.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://github.com/jamon/playmusic.git#7488e8b14773960ba295ded3201f6192aba5fc4d",
  "_shasum": "8f455a0f72931f0caca99a18616197765e344680",
  "_shrinkwrap": null,
  "_spec": "git+https://github.com/jamon/playmusic.git",
  "_where": "/atomos",
  "author": {
    "email": "playmusic@jamonterrell.com",
    "name": "Jamon Terrell",
    "url": "https://github.com/jamon/"
  },
  "bugs": {
    "email": "playmusic@jamonterrell.com",
    "url": "https://github.com/jamon/playmusic/issues"
  },
  "dependencies": {
    "crypto-js": ">= 3.1",
    "node-uuid": "~1.4.1",
    "rsa-pem-from-mod-exp": "^0.8.4"
  },
  "description": "Node JS Google Play Music API.  Supports All Access",
  "devDependencies": {},
  "gitHead": "7488e8b14773960ba295ded3201f6192aba5fc4d",
  "homepage": "https://www.github.com/jamon/playmusic",
  "keywords": [
    "all access",
    "gmusic",
    "gmusicapi",
    "google play",
    "play music"
  ],
  "license": "MPL-2.0",
  "main": "play",
  "name": "playmusic",
  "optionalDependencies": {},
  "readme": "Node-JS Google Play Music API\n====\nWritten by Jamon Terrell <git@jamonterrell.com>\n\n---\n\nNOTE:  As of version 2.0, all callbacks are node.js style, with the first param being an \"error\" if one exists.  If you are upgrading from 1.x you'll need to make sure to update your callbacks as represented in the documentation\n\n---\n\nThis project is not endorsed by of affiliated with Google in any way.\n\n\nSeeking Help!\n----\n\nI'm creating a few issues for items that I'd like to have added, but haven't had time to add.  If anyone wants to volunteer to submit PRs for them, or is interested in becoming a direct contributor to the project, please comment on those issues or e-mail me.\n\nThanks!\n\n\nAuthentication\n----\n\nThe library requires Google credentials, but does not require an All Access subscription on that account. It also requires a mobile device registered against that account. Ensure you have signed into the app on a phone and that you have played any amount of music. This will authorise the device that the library will masquerade as.\n\nThe Google account also needs to have the \"Allow less secure apps\" setting set to \"ON\". You can change it [here](https://myaccount.google.com/security#connectedapps).\n\nHow to Use\n----\n\nInitialization\n```js\nvar PlayMusic = require('playmusic');\nvar pm = new PlayMusic();\npm.init({email: \"email@address.com\", password: \"password\"}, function(err) {\n    if(err) console.error(err);\n    // place code here\n})\n```\n\nYou may also call init with a master token either extracted from an existing android device or created by calling pm.login.\n\n```js\nvar PlayMusic = require('playmusic');\nvar pm = new PlayMusic();\npm.init({androidId: \"16 DIGIT HEX\", masterToken: \"oauth2rt_1/...\"}, function(err) {\n    if(err) console.error(err);\n    // place code here\n})\n```\n\nTo create a master token, call pm.login.  if you do not provide an androidId, one will be generated.  The callback function will be given an object containing \"masterToken\" and \"androidId\".  This object can be saved and passed to init on future calls.\n\n```js\nvar PlayMusic = require('playmusic');\nvar pm = new PlayMusic();\npm.login({email: \"email@address.com\", password: \"password\", androidId: \"16 DIGIT HEX\"}, function(err) {\n    if(err) console.error(err);\n    // place code here\n})\n```\n\nRetrieve list of all tracks in your library (uploaded tracks _and_ tracks added to library from All Access)\n```js\n    pm.getAllTracks(function(err, library) {\n        var song = library.data.items.pop();\n        console.log(song);\n        pm.getStreamUrl(song.id, function(err, streamUrl) {\n            console.log(streamUrl);\n        });\n    });\n```\n\nSearch for a song\n```js\n    pm.search(\"bastille lost fire\", 5, function(err, data) { // max 5 results\n        var song = data.entries.sort(function(a, b) { // sort by match score\n            return a.score < b.score;\n        }).shift(); // take first song\n        console.log(song);\n        pm.getStreamUrl(song.track.nid, function(err, streamUrl) {\n            console.log(streamUrl);\n        });\n    }, function(message, body, err, httpResponse) {\n        console.log(message);\n    });\n```\n\nRetrieve Playlists\n```js\n    // gets all playlists\n    pm.getPlayLists(function(err, data) {\n        console.log(data.data.items);\n    });\n\n    // gets all playlists, and all entries on each\n    pm.getPlayListEntries(function(err, data) {\n        console.log(data.data.items);\n    });\n```\n\nGet favorite songs\n```js\n\tpm.getFavorites(function(err, data) {\n\t\tconsole.log(data.track);\n\t});\n```\n\nRetrieve the Stream URL for a song by track.storeId (All Access songs only!!!)\n```js\n    pm.getStreamUrl(\"Thvfmp2be3c7kbp6ny4arxckz54\", console.log);\n```\n\nRetrieve the Stream URL for a song by track.id (uploaded songs only!!!)\n```js\n    pm.getStreamUrl(\"84df1e4e-6b76-3147-9a78-a44becc28dc5\", console.log);\n```\n\nRetrieve information about an album or artist (All Access Only!!!)\n```js\n    // getArtist - artistId, albumList, topTrackCount, relatedArtistCount[, callback]\n    pm.getArtist('Ak6zkmv2zbbsaxl63cgsnx5ttcm', true, 2, 2);\n\n    // getAlbum - albumId, includeTracks[, success, error]\n    pm.getAlbum('Bfn67zo6q3ekh35eaorkq5untmi', true);\n```\n\nGet Google Play Music Settings\n\n```js\n    pm.getSettings();\n```\n\nMore Examples:\n===\n\n```js\nnpm install playmusic\nnode\n\nvar pm = new (require('playmusic'));\npm.init({email: \"email\", password: \"password\"}, function() {});\n// var pm = new (require('./'))();  pm.init(JSON.parse(require('fs').readFileSync(\"./examples/config.json\")));\n\npm.getPlayLists();\npm.getPlayListEntries();\n\n// getArtist - artistId, albumList, topTrackCount, relatedArtistCount[, callback]\npm.getArtist('Ak6zkmv2zbbsaxl63cgsnx5ttcm', true, 2, 2, console.log);\n\n// getStreamUrl for All Access - sj#track -> storeId\npm.getStreamUrl('Tsbbwp6r2wpwxb55noc6b26kwq4', console.log);\n\n// getStreamUrl for uploaded - sj#track -> id\npm.getStreamUrl('84df1e4e-6b76-3147-9a78-a44becc28dc5', console.log);\n\n\n// Find all uploaded tracks (tracks returned by getAllTracks without a storeId), get a streamUrl for one of them\nvar allTracks;\npm.getAllTracks(function(data) { allTracks = data.data.items; });\nvar searchResults = allTracks.filter(function(track) { return typeof track.storeId === \"undefined\"; });\nconsole.log(searchResults[0]);\npm.getStreamUrl(searchResults[0].id, console.log);\n```\n\nFuture\n----\n* create stations / get songs from stations/genres\n* provide better examples\n* add automated integration testing\n* improve authentication\n* explore providing a higher level api that allows easy following of relationships between objects\n* Suggestions?  submit an issue!\n\nLicense\n----\nThis Source Code is subject to the terms of the Mozilla Public\nLicense, v. 2.0. If a copy of the MPL was not distributed with this\nfile, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nAttribution\n----\n\nSpecial thanks go out to the following individuals and projects:\n* [Google Play Music resolver for Tomahawk](https://github.com/tomahawk-player/tomahawk-resolvers/blob/master/gmusic/content/contents/code/gmusic.js) - information on the gmusic api\n* [gmusicapi project](https://github.com/simon-weber/Unofficial-Google-Music-API/blob/develop/gmusicapi/protocol/mobileclient.py)  by Simon Weber and others - information on the gmusic api, also special thanks to their IRC support of my many questions\n* [wyozi](https://github.com/wyozi) - playlist management support\n* [Jonathan Cremin](https://github.com/kudos) and [match-audio](https://match.audio/) - contributions including support for new api changes and documentation for authorization, bug fixes for error handling\n* [Jan Smolders](https://github.com/jansmolders86) and [MediacenterJS](http://mediacenterjs.com/) - testing, troubleshooting and other feedback\n* [Puneeth Uttla](https://github.com/kiwiluver75) - authentication workaround, api change fixes (Thanks a bunch!)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jamon/playmusic.git"
  },
  "version": "2.3.0"
}

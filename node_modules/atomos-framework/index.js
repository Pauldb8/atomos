const fs = require("fs-extra");
const {
  ipcRenderer,
  remote,
  clipboard
} = require("electron");
const {
  BrowserWindow
} = require("electron").remote;
window.this = remote.getCurrentWindow();
window.mimeList = []
window.getMimeType = function(ext) {
  console.log(window.mimeList.find(o => o.extension === ext), ext)
  if (window.mimeList.find(o => o.extension === ext) === undefined) {
    if (ext.indexOf("/") !== -1) return "inode/directory";
    else return "text/plain";
  } else return window.mimeList.find(o => o.extension === ext)["mime"]
}

// File Clipboard API

window.fileClipboard = {}
window.fileClipboard.add = function(path) {
  window.fileClipboard.isFilled = true;
  var oldcb = clipboard.readText("fileBuffer");
  oldcb = $.parseJSON(oldcb);
  oldcb.push(path);
  clipboard.writeText(JSON.stringify(oldcb));
}
window.fileClipboard.copyMode = "copy";
window.fileClipboard.overwrite = false;
window.fileClipboard.clear = function() {
  window.fileClipboard.isFilled = false;
  clipboard.writeText("[]", "fileBuffer");
}
window.fileClipboard.isFilled = false;
window.fileClipboard.flush = function(target) {
  var cb = $.parseJSON(clipboard.readText("fileBuffer"));
  cb.forEach(function(file) {
    fs.copySync(file, target + file.substring(file.lastIndexOf("/")));
    if (window.fileClipboard.copyMode === "cut") fs.removeSync(file);
  })
  window.fileClipboard.clear();
}
if (clipboard.readText("fileBuffer")) window.fileClipboard.clear();

// } //

window.fileOpen = function(path) {
  var mime = window.getMimeType(path.substring(path.lastIndexOf(".") + 1));
  console.log(mime);
  fs.readFile("/atomos/etc/associations.json", "utf8", function(err, assocs) {
    assocs = $.parseJSON(assocs);

    console.log(assocs);
    assocs = assocs.find(o => o.mime == mime);
    console.log(assocs);
    if (assocs) window.new(assocs.app, {
      path: path
    });
    else window.new("aos-appchooserdialog", {
      path: path,
      mimeType: mime
    });
  })
}
window.new = function(app, args, electronOptions) {
  $.getJSON("/atomos/etc/apps/" + app.replace("/", "-") + ".json", function(settings) {
    var defaultOptions = {
      width: settings.width || 400,
      height: settings.height || 300,
      minWidth: settings.minWidth || 100,
      minHeight: settings.minHeight || 100,
      resizable: (settings.resizable === undefined ? true : settings.resizable),
      minimizable: (settings.minimizable === undefined ? true : settings.minimizable),
      maximizable: (settings.maximizable === undefined ? true : settings.maximizable),
      closable: (settings.closable === undefined ? true : settings.closable),
      title: settings.name || "New Application",
      acceptFirstMouse: true,
      webPreferences: {
        preload: "/atomos/apps/preload.js",
        defaultEncoding: "utf-8"
      }
    };
    Object.assign(defaultOptions, defaultOptions, settings, electronOptions);
    let win = new BrowserWindow(defaultOptions);
    require('electron').ipcRenderer.send("setArguments", {
      wid: win.id,
      arguments: args
    })
    win.setIcon = function(icon) {
      ipcRenderer.send("icon-change", {
        icon: icon,
        wid: win.id
      })
    };
    win.setIcon(settings.icon || "/atomos/icons/Application.png");
    win.setMenu(null);
    win.loadURL("file:///atomos/apps/" + app + "/index.html");
    win.webContents.on("context-menu", function(event, params) {
      console.log(event, params);
      if (params.inputFieldType !== "none") {
        var cmenu = new module.exports.Menu([{
          label: "Undo",
          action: "__undo",
          disabled: !params.editFlags.canUndo
        }, {
          label: "Redo",
          action: "__undo",
          disabled: !params.editFlags.canRedo
        }, {
          type: "separator"
        }, {
          label: "Cut",
          action: "__cut",
          disabled: !params.editFlags.canCut
        }, {
          label: "Copy",
          action: "__copy",
          disabled: !params.editFlags.canCopy
        }, {
          label: "Paste",
          action: "__paste",
          disabled: !params.editFlags.canPaste
        }, {
          type: "separator"
        }, {
          label: "Select all",
          action: "__select all",
          disabled: !params.editFlags.canSelectAll
        }])
        cmenu.popup({
          x: params.x,
          y: params.y
        }, win)
      }
    })
    win.show();
    return win;
  })
}
window.onload = function() {
  $("*").mouseup(function(e) {
    if (e.button !== 2) ipcRenderer.send("close-any-menu")
  })
}

module.exports.Menu = class {
  constructor(template = []) {
    this.items = template;
  }

  popup(options, win = remote.getCurrentWindow(), params = {}) {
    this.win = win;
    const {
      remote
    } = require('electron');
    const {
      BrowserWindow
    } = remote;
    console.log(win);
    ipcRenderer.send("spawn-menu", {
      win: win.id,
      items: this.items,
      x: options.x + win.getPosition()[0],
      y: options.y + win.getPosition()[1],
      params: params
    });
  }

  closePopup() {
    require('electron').remote.BrowserWindow.fromID(6).webContents.send("close-menu", this.win.id);
  }
}

fs.readFile("/etc/mime.types", "utf8", function(errno, mimeList) {
  var mimeArr = mimeList.split("\n");
  mimeArr.forEach(function(mime) {
    if (mime[0] != "#" && mime.trim() != "" && mime.indexOf("	") !== -1) {
      var m1 = mime.trim().split("	");
      m1 = m1.filter((n) => {
        return n != ""
      });
      var exts = m1[1].trim().split(" ");
      exts.forEach(function(ext) {
        window.mimeList.push({
          mime: m1[0].trim(),
          extension: ext
        });
      })
    }
  })
})
